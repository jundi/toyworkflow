[core]
# The maximum number of times that a job can be automatically rescheduled by a
# worker before it will stop trying. Workers will reschedule a job if it is
# found to not be done when attempting to run a dependent job. This defaults to
# 1.
#max_reschedules = 1

[scheduler]
# Whether to send batch e-mails for failures and disables rather than sending
# immediate disable e-mails and just relying on workers to send immediate batch
# e-mails. Defaults to false.
#batch_emails = false

# Hard time limit after which tasks will be disabled by the server if they fail
# again, in seconds. It will disable the task if it fails again after this
# amount of time. E.g. if this was set to 600 (i.e. 10 minutes), and the task
# first failed at 10:00am, the task would be disabled if it failed again any
# time after 10:10am. Note: This setting does not consider the values of the
# retry_count or disable-window-seconds settings.
#disable-hard-timeout = false

# Number of times a task can fail within disable-window-seconds before the
# scheduler will automatically disable it. If not set, the scheduler will not
# automatically disable jobs.
#retry_count = 0

# Number of seconds for which an automatic scheduler disable lasts. Defaults to
# 86400 (1 day).
#disable-persist-seconds = 86400

# Number of seconds during which retry_count failures must occur in order for
# an automatic disable by the scheduler. The scheduler forgets about disables
# that have occurred longer ago than this amount of time. Defaults to 3600 (1
# hour).
#disable-window-seconds = 3600

# If true, stores task history in a database. Defaults to false.
#record_task_history = false

# Number of seconds to wait before removing a task that has no stakeholders.
# Defaults to 600 (10 minutes).
#remove_delay = 600

# Number of seconds to wait after a task failure to mark it pending again.
# Defaults to 900 (15 minutes).
retry_delay = 5

# Path in which to store the Luigi scheduler’s state. When the scheduler is
# shut down, its state is stored in this path. The scheduler must be shut down
# cleanly for this to work, usually with a kill command. If the kill command
# includes the -9 flag, the scheduler will not be able to save its state. When
# the scheduler is started, it will load the state from this path if it exists.
# This will restore all scheduled jobs and other state from when the scheduler
# last shut down.
#    Sometimes this path must be deleted when restarting the scheduler after
# upgrading Luigi, as old state files can become incompatible with the new
# scheduler. When this happens, all workers should be restarted after the
# scheduler both to become compatible with the updated code and to reschedule
# the jobs that the scheduler has now forgotten about.
#    This defaults to /var/lib/luigi-server/state.pickle
#state_path = /var/lib/luigi-server/state.pickle

# Number of seconds to wait after a worker has stopped pinging the scheduler
# before removing it and marking all of its running tasks as failed. Defaults
# to 60.
#worker_disconnect_delay = 60

# If false, disables pause/unpause operations and hides the pause toggle from
# the visualiser.
#pause_enabled = true

# When true, the scheduler is allowed to send messages to running tasks and the
# central scheduler provides a simple prompt per task to send messages.
# Defaults to true.
#send_messages = true

[worker]
# If true, workers will only count unique pending jobs when deciding whether to
# stay alive. So if a worker can’t get a job to run and other workers are
# waiting on all of its pending jobs, the worker will die. worker-keep-alive
# must be true for this to have any effect. Defaults to false.
#count_uniques = false

# If true, workers will stay alive when they run out of jobs to run, as long as
# they have some pending job waiting to be run. Defaults to false.
keep_alive = true


# Number of seconds to wait between pinging scheduler to let it know that the
# worker is still alive. Defaults to 1.0.
#ping_interval = 1.0


# Maximum number of tasks to schedule per invocation. Upon exceeding it, the
# worker will issue a warning and proceed with the workflow obtained thus far.
# Prevents incidents due to spamming of the scheduler, usually accidental.
# Default: no limit.
#task_limit = 999


# Number of seconds after which to kill a task which has been running for too
# long. This provides a default value for all tasks, which can be overridden by
# setting the worker-timeout property in any task. This only works when using
# multiple workers, as the timeout is implemented by killing worker
# subprocesses. Default value is 0, meaning no timeout.
#timeout = 0

# Number of seconds for the worker to wait before asking the scheduler for
# another job after the scheduler has said that it does not have any available
# jobs.
#wait_interval = 1.0

# Size of jitter to add to the worker wait interval such that the multiple
# workers do not ask the scheduler for another job at the same time. Default:
# 5.0
#wait_jitter = 5.0

# Maximum number of times to reschedule a failed task. Default: 1
#max_reschedules = 0

# If true, incomplete external tasks (i.e. tasks where the run() method is
# NotImplemented) will be retested for completion while Luigi is running. This
# means that if external dependencies are satisfied after a workflow has
# started, any tasks dependent on that resource will be eligible for running.
# Note: Every time the task remains incomplete, it will count as FAILED, so
# normal retry logic applies (see: retry_count and retry_delay). This setting
# works best with worker-keep-alive: true. If false, external tasks will only
# be evaluated when Luigi is first invoked. In this case, Luigi will not check
# whether external dependencies are satisfied while a workflow is in progress,
# so dependent tasks will remain PENDING until the workflow is reinvoked.
# Defaults to false for backwards compatibility.
#retry_external_tasks = true

# By default, workers will stop requesting new work and finish running pending
# tasks after receiving a SIGUSR1 signal. This provides a hook for gracefully
# shutting down workers that are in the process of running (potentially
# expensive) tasks. If set to true, Luigi will NOT install this shutdown hook
# on workers. Note this hook does not work on Windows operating systems, or
# when jobs are launched outside the main execution thread. Defaults to false.
#no_install_shutdown_handler = false

# Controls whether the worker will send e-mails on task and scheduling
# failures. If set to false, workers will only send e-mails on framework errors
# during scheduling and all other e-mail must be handled by the scheduler.
# Defaults to true.
#send_failure_email = true

# If true, the worker checks for completeness of dependencies before running a
# task. In case unfulfilled dependencies are detected, an exception is raised
# and the task will not run. This mechanism is useful to detect situations
# where tasks do not create their outputs properly, or when targets were
# removed after the dependency tree was built. It is recommended to disable
# this feature only when the completeness checks are known to be bottlenecks,
# e.g. when the exists() calls of the dependencies’ outputs are
# resource-intensive. Defaults to true.
#check_unfulfilled_deps = true

# By default, luigi uses multiprocessing when more than one worker process is
# requested. Whet set to true, multiprocessing is used independent of the the
# number of workers. Defaults to false.
#force_multiprocessing = false
